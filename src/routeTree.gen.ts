/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as CharactersIndexImport } from './routes/characters/index'
import { Route as AppPracticeSetupImport } from './routes/app/practice-setup'
import { Route as AppCharactersImport } from './routes/app/characters'
import { Route as AppDashboardIndexImport } from './routes/app/dashboard/index'
import { Route as AppCharactersCharImport } from './routes/app/characters/$char'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CharactersIndexRoute = CharactersIndexImport.update({
  id: '/characters/',
  path: '/characters/',
  getParentRoute: () => rootRoute,
} as any)

const AppPracticeSetupRoute = AppPracticeSetupImport.update({
  id: '/practice-setup',
  path: '/practice-setup',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppCharactersRoute = AppCharactersImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDashboardIndexRoute = AppDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppCharactersCharRoute = AppCharactersCharImport.update({
  id: '/$char',
  path: '/$char',
  getParentRoute: () => AppCharactersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/characters': {
      id: '/app/characters'
      path: '/characters'
      fullPath: '/app/characters'
      preLoaderRoute: typeof AppCharactersImport
      parentRoute: typeof AppRouteImport
    }
    '/app/practice-setup': {
      id: '/app/practice-setup'
      path: '/practice-setup'
      fullPath: '/app/practice-setup'
      preLoaderRoute: typeof AppPracticeSetupImport
      parentRoute: typeof AppRouteImport
    }
    '/characters/': {
      id: '/characters/'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/characters/$char': {
      id: '/app/characters/$char'
      path: '/$char'
      fullPath: '/app/characters/$char'
      preLoaderRoute: typeof AppCharactersCharImport
      parentRoute: typeof AppCharactersImport
    }
    '/app/dashboard/': {
      id: '/app/dashboard/'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppCharactersRouteChildren {
  AppCharactersCharRoute: typeof AppCharactersCharRoute
}

const AppCharactersRouteChildren: AppCharactersRouteChildren = {
  AppCharactersCharRoute: AppCharactersCharRoute,
}

const AppCharactersRouteWithChildren = AppCharactersRoute._addFileChildren(
  AppCharactersRouteChildren,
)

interface AppRouteRouteChildren {
  AppCharactersRoute: typeof AppCharactersRouteWithChildren
  AppPracticeSetupRoute: typeof AppPracticeSetupRoute
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppCharactersRoute: AppCharactersRouteWithChildren,
  AppPracticeSetupRoute: AppPracticeSetupRoute,
  AppDashboardIndexRoute: AppDashboardIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/characters': typeof AppCharactersRouteWithChildren
  '/app/practice-setup': typeof AppPracticeSetupRoute
  '/characters': typeof CharactersIndexRoute
  '/app/characters/$char': typeof AppCharactersCharRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/characters': typeof AppCharactersRouteWithChildren
  '/app/practice-setup': typeof AppPracticeSetupRoute
  '/characters': typeof CharactersIndexRoute
  '/app/characters/$char': typeof AppCharactersCharRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/characters': typeof AppCharactersRouteWithChildren
  '/app/practice-setup': typeof AppPracticeSetupRoute
  '/characters/': typeof CharactersIndexRoute
  '/app/characters/$char': typeof AppCharactersCharRoute
  '/app/dashboard/': typeof AppDashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/characters'
    | '/app/practice-setup'
    | '/characters'
    | '/app/characters/$char'
    | '/app/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/app/characters'
    | '/app/practice-setup'
    | '/characters'
    | '/app/characters/$char'
    | '/app/dashboard'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/characters'
    | '/app/practice-setup'
    | '/characters/'
    | '/app/characters/$char'
    | '/app/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  CharactersIndexRoute: typeof CharactersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  CharactersIndexRoute: CharactersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/characters/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/characters",
        "/app/practice-setup",
        "/app/dashboard/"
      ]
    },
    "/app/characters": {
      "filePath": "app/characters.tsx",
      "parent": "/app",
      "children": [
        "/app/characters/$char"
      ]
    },
    "/app/practice-setup": {
      "filePath": "app/practice-setup.tsx",
      "parent": "/app"
    },
    "/characters/": {
      "filePath": "characters/index.tsx"
    },
    "/app/characters/$char": {
      "filePath": "app/characters/$char.tsx",
      "parent": "/app/characters"
    },
    "/app/dashboard/": {
      "filePath": "app/dashboard/index.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
